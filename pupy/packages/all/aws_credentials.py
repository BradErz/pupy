import os
import ConfigParser


class AWSCredentials:

    def __init__(self):
        self.filename = "credentials"
        self.directory = "~/.aws"
        self.full_path = ""
        self.creds_found = []

    def run(self):
        """
        This method is invoked by the PupyModule as a wrapper to run the class.
        It takes the values generated by self.check_env_vars and self.check_creds_file and appends them to a dict
        called creds_found which is called to display the information in the PupyModule
        :return: 
        """
        self.check_shared_creds_location()
        keys_from_env = self.check_env_vars()
        if keys_from_env:
            self.creds_found.append(keys_from_env)

        if os.path.exists(self.full_path) and os.path.getsize(self.full_path) > 0:
            profiles = self.check_creds_file()
            if profiles:
                for profile in profiles:
                    self.creds_found.append(profile)

    def check_shared_creds_location(self):
        """
        This method checks to see if the user has set the environment variable AWS_SHARED_CREDENTIALS_FILE.
        If it is set then it updates the self.full_path variable with the expanded path. Otherwise it takes
        the default self.directory and self.filename and adds them together using the os.path.join method
        which allows cross os compatibility as it handles the variants between windows and linux
        """
        if os.getenv('AWS_SHARED_CREDENTIALS_FILE'):
            self.full_path = os.path.expanduser(os.getenv('AWS_SHARED_CREDENTIALS_FILE'))
        else:
            self.full_path = os.path.expanduser(os.path.join(self.directory, self.filename))

    def check_env_vars(self):
        """
        This method checks the users environment variables to see if both AWS_ACCESS_KEY_ID and 
        AWS_SECRET_ACCESS_KEY are set. If so it appends them to an object called values and returns it. Otherwise
        it returns none.
        :return: values
        """
        if os.getenv('AWS_ACCESS_KEY_ID') and os.getenv('AWS_SECRET_ACCESS_KEY'):
            values = {}
            values['profile_name'] = ""
            values['location'] = "Found in shell environment"
            values['aws_access_key_id'] = os.getenv('AWS_ACCESS_KEY_ID')
            values['aws_secret_access_key'] = os.getenv('AWS_SECRET_ACCESS_KEY')
            return values
        else:
            return None

    def check_creds_file(self):
        """
        This method takes the self.full_path which is generated by check_shared_creds_location. 
        It then creates a new instance of ConfigParser to parse the .ini file format which the aws credentials
        are stored in. It goes over all the sections in the credentials file creating and object called values 
        and returns them to a dictionary called profiles.
        :return: profiles
        """
        config = ConfigParser.RawConfigParser()
        config.read(self.full_path)
        profiles = []
        for section in config.sections():
            values = {}
            values['profile_name'] = section
            values['location'] = "Found in credentials file ({full_path})".format(full_path=self.full_path)
            values['aws_access_key_id'] = config.get(section, "aws_access_key_id")
            values['aws_secret_access_key'] = config.get(section, "aws_secret_access_key")
            profiles.append(values)
        return profiles

